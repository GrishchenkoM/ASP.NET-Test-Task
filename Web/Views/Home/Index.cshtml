@using Web.Helpers
@model Web.Models.ListGenerationModel
@{
    ViewBag.Title = "Главная";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var ajax = new AjaxOptions
    {
        UpdateTargetId = "numberList",
        Url = Url.Action("GetContent", "Home"),
        LoadingElementId = "loadingElement"
    };
}

@section Context{

    <script src="../../Scripts/jquery-1.11.3.js" type="text/javascript"></script>
    <script type="text/javascript" src="@Url.Content("~/scripts/jquery.unobtrusive-ajax.min.js")"></script>
    <div class="post_box pb_last">
        
        @using (Ajax.BeginForm(ajax))
        {
            <h2>
                @*@Ajax.AjaxPagingNavigator((int) ViewBag.CurrentPageNum, (int) ViewBag.PagesCount)*@
                @Html.PagingNavigator((int)ViewBag.CurrentPageNum, (int)ViewBag.PagesCount)
            </h2>
            <div class="search-button">
                <input type="submit" value="Refresh" onclick="slideToggleDiv('#content1',1000)"/>
            </div>
            @*<div class="image_wrapper">*@
                <div id="content1">
                    <div class="image_wrapper">
                        <table class="my-simple-table" id="numberList">
                            @*@Html.Action("GetContent", new {pageNum = ViewBag.CurrentPage})*@
                            @{ Html.RenderPartial("IndexContent", Model); }
                        </table>
                        <div id="loadingElement" style="display: none; color: red">
                            <p>LOADING...</p>
                        </div>
                    </div>
                    <div class="cleaner"></div>
                </div>
            @*</div>*@
            <div class="cleaner"></div>
            <script>slideToggleDiv('#content1')</script>
        }
    </div >

}

@helper CreateTable(List<int> items)
    {
        const int rowsNumber = 15;
        const int colNumber = 10;
    <table class="my-simple-table">
        @for (var i = 0; i < rowsNumber; ++i)
        {
            @WriteInCell(items, i, rowsNumber, colNumber)
        }
    </table>
}

@helper WriteInCell(List<int> items, int position, int increase, int colNumber)
    {
    <tr>
    @try
    {
        for (var i = 0; i < colNumber; ++i)
        {
            <td>@items[position + i * increase]</td>
        }
    }
    catch (Exception) { }
    </tr>
}
